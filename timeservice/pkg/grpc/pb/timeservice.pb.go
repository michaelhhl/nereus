// Code generated by protoc-gen-go. DO NOT EDIT.
// source: timeservice/pkg/grpc/pb/timeservice.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetTimeByTimeZoneRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTimeByTimeZoneRequest) Reset()         { *m = GetTimeByTimeZoneRequest{} }
func (m *GetTimeByTimeZoneRequest) String() string { return proto.CompactTextString(m) }
func (*GetTimeByTimeZoneRequest) ProtoMessage()    {}
func (*GetTimeByTimeZoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0084fe312722410d, []int{0}
}

func (m *GetTimeByTimeZoneRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTimeByTimeZoneRequest.Unmarshal(m, b)
}
func (m *GetTimeByTimeZoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTimeByTimeZoneRequest.Marshal(b, m, deterministic)
}
func (m *GetTimeByTimeZoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTimeByTimeZoneRequest.Merge(m, src)
}
func (m *GetTimeByTimeZoneRequest) XXX_Size() int {
	return xxx_messageInfo_GetTimeByTimeZoneRequest.Size(m)
}
func (m *GetTimeByTimeZoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTimeByTimeZoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTimeByTimeZoneRequest proto.InternalMessageInfo

type GetTimeByTimeZoneReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTimeByTimeZoneReply) Reset()         { *m = GetTimeByTimeZoneReply{} }
func (m *GetTimeByTimeZoneReply) String() string { return proto.CompactTextString(m) }
func (*GetTimeByTimeZoneReply) ProtoMessage()    {}
func (*GetTimeByTimeZoneReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0084fe312722410d, []int{1}
}

func (m *GetTimeByTimeZoneReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTimeByTimeZoneReply.Unmarshal(m, b)
}
func (m *GetTimeByTimeZoneReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTimeByTimeZoneReply.Marshal(b, m, deterministic)
}
func (m *GetTimeByTimeZoneReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTimeByTimeZoneReply.Merge(m, src)
}
func (m *GetTimeByTimeZoneReply) XXX_Size() int {
	return xxx_messageInfo_GetTimeByTimeZoneReply.Size(m)
}
func (m *GetTimeByTimeZoneReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTimeByTimeZoneReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetTimeByTimeZoneReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetTimeByTimeZoneRequest)(nil), "pb.GetTimeByTimeZoneRequest")
	proto.RegisterType((*GetTimeByTimeZoneReply)(nil), "pb.GetTimeByTimeZoneReply")
}

func init() {
	proto.RegisterFile("timeservice/pkg/grpc/pb/timeservice.proto", fileDescriptor_0084fe312722410d)
}

var fileDescriptor_0084fe312722410d = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2c, 0xc9, 0xcc, 0x4d,
	0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2f, 0xc8, 0x4e, 0xd7, 0x4f, 0x2f, 0x2a, 0x48,
	0xd6, 0x2f, 0x48, 0xd2, 0x47, 0x12, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48,
	0x52, 0x92, 0xe2, 0x92, 0x70, 0x4f, 0x2d, 0x09, 0xc9, 0xcc, 0x4d, 0x75, 0xaa, 0x04, 0x91, 0x51,
	0xf9, 0x79, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x4a, 0x12, 0x5c, 0x62, 0x58, 0xe4,
	0x0a, 0x72, 0x2a, 0x8d, 0x62, 0xb8, 0xb8, 0x43, 0x10, 0xc6, 0x09, 0xf9, 0x72, 0x09, 0x62, 0x28,
	0x14, 0x92, 0xd1, 0x2b, 0x48, 0xd2, 0xc3, 0x65, 0xb6, 0x94, 0x14, 0x0e, 0xd9, 0x82, 0x9c, 0xca,
	0x24, 0x36, 0xb0, 0xf3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x77, 0xf9, 0x3b, 0x19, 0xcb,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TimeserviceClient is the client API for Timeservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeserviceClient interface {
	GetTimeByTimeZone(ctx context.Context, in *GetTimeByTimeZoneRequest, opts ...grpc.CallOption) (*GetTimeByTimeZoneReply, error)
}

type timeserviceClient struct {
	cc *grpc.ClientConn
}

func NewTimeserviceClient(cc *grpc.ClientConn) TimeserviceClient {
	return &timeserviceClient{cc}
}

func (c *timeserviceClient) GetTimeByTimeZone(ctx context.Context, in *GetTimeByTimeZoneRequest, opts ...grpc.CallOption) (*GetTimeByTimeZoneReply, error) {
	out := new(GetTimeByTimeZoneReply)
	err := c.cc.Invoke(ctx, "/pb.Timeservice/GetTimeByTimeZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeserviceServer is the server API for Timeservice service.
type TimeserviceServer interface {
	GetTimeByTimeZone(context.Context, *GetTimeByTimeZoneRequest) (*GetTimeByTimeZoneReply, error)
}

// UnimplementedTimeserviceServer can be embedded to have forward compatible implementations.
type UnimplementedTimeserviceServer struct {
}

func (*UnimplementedTimeserviceServer) GetTimeByTimeZone(ctx context.Context, req *GetTimeByTimeZoneRequest) (*GetTimeByTimeZoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeByTimeZone not implemented")
}

func RegisterTimeserviceServer(s *grpc.Server, srv TimeserviceServer) {
	s.RegisterService(&_Timeservice_serviceDesc, srv)
}

func _Timeservice_GetTimeByTimeZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeByTimeZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeserviceServer).GetTimeByTimeZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Timeservice/GetTimeByTimeZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeserviceServer).GetTimeByTimeZone(ctx, req.(*GetTimeByTimeZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Timeservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Timeservice",
	HandlerType: (*TimeserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimeByTimeZone",
			Handler:    _Timeservice_GetTimeByTimeZone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timeservice/pkg/grpc/pb/timeservice.proto",
}
